###########################
#  Non-Https Redirect     #
###########################

server {
	listen 80;
	server_name << DOMAIN >>;
	root << PATH/TO/HTML/FOLDER >>;
	index index.html index.htm index.nginx-debian.html index.php;

	# set CORS varialbes to empty, write them if CORS should be enabled
	set $acao '';
	set $acac '';
	set $acam '';
	set $acah '';
	set $aceh '';
	if ($http_origin ~* 'https?://(localhost|<<DOMAIN|DOMAIN|DOMAIN>>)(:[0-9]+)?') {
		set $acao $http_origin;
		set $acac 'true';
		set $acam 'GET, POST, PUT, DELETE, OPTIONS';
		set $acah 'Accept,Authorization,Cache-Control,Content-Type,DNT,If-Modified-Since,Keep-Alive,Origin,User-Agent,X-Mx-ReqToken,X-Requested-With';
		set $aceh 'Authorization';
	}
	location / {
		rewrite     ^   https://$server_name$request_uri? permanent;
	}
	location ~ /(mtc\.js|mtracking.gif|mtc) {
		# default_type "application/javascript";
		try_files $uri /index.php$is_args$args;
	}
	location ~ \.php$ {
		include snippets/fastcgi-php.conf;
		fastcgi_pass unix:/run/php/php7.2-fpm.sock;

		# always is required to add headers even if response's status is 4xx or 5xx
		add_header 'Access-Control-Allow-Origin' $acao  always;

		# required to be able to read Authorization header in frontend
		add_header 'Access-Control-Expose-Headers' $aceh always;
	}

}

###########################
#  Https Server Config    #
###########################


server {

	server_name << DOMAIN >>;
	listen 443 ssl http2;

	listen [::]:443 ssl http2;

	ssl on;

	ssl_certificate << /PATH/TO/SSL/CERT >>;
	ssl_certificate_key << PAT/TO/SSL/PRIVATE/KEY >>;

	root << PATH/TO/HTML/FOLDER >>;

	index index.html index.htm index.nginx-debian.html index.php;


	# redirect index.php to root
	rewrite ^/index.php/(.*) /$1  permanent;

	# allow large file uploads for theme installs
	client_max_body_size 128m;

	# redirect some entire folders
	rewrite ^/(vendor|translations|build|plugins/integrations)/.* /index.php break;

	# set CORS varialbes to empty, write them if CORS should be enabled
	set $acao '';
	set $acac '';
	set $acam '';
	set $acah '';
	set $aceh '';
	if ($http_origin ~* 'https?://(localhost|<<DOMAIN|DOMAIN|DOMAIN>>)(:[0-9]+)?') {
		set $acao $http_origin;
		set $acac 'true';
		set $acam 'GET, POST, PUT, DELETE, OPTIONS';
		set $acah 'Accept,Authorization,Cache-Control,Content-Type,DNT,If-Modified-Since,Keep-Alive,Origin,User-Agent,X-Mx-ReqToken,X-Requested-With';
		set $aceh 'Authorization';
	}

	location / {

		try_files $uri /index.php$is_args$args;

		# always is required to add headers even if response's status is 4xx or 5xx
		add_header 'Access-Control-Allow-Origin' $acao  always;
		add_header 'Access-Control-Allow-Credentials' $acac always;
		add_header 'Access-Control-Allow-Methods' $acam always;
		add_header 'Access-Control-Allow-Headers' $acah always;

		# required to be able to read Authorization header in frontend
		add_header 'Access-Control-Expose-Headers' $aceh always;

		# CORS Preflight
		# NOTE: try_files never gets executed. This is OK because it's just preflight.
		if ($request_method = 'OPTIONS') {
				add_header 'Access-Control-Allow-Origin' "$http_origin";
				add_header 'Access-Control-Allow-Credentials' 'true';
				add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS';
				add_header 'Access-Control-Allow-Headers' 'Accept,Authorization,Cache-Control,Content-Type,DNT,If-Modified-Since,Keep-Alive,Origin,User-Agent,X-Mx-ReqToken,X-Requested-With';

				return 204;
		}
	}
	location ~ /mtc.js {
		default_type "application/javascript";
		try_files $uri /index.php$is_args$args;
	}



	# Deny everything else in /app folder except Assets folder in bundles
	location ~ /app/bundles/.*/Assets/ {
		allow all;
		access_log off;
	}
	location ~ /app/ { deny all; }

	# Deny everything else in /addons or /plugins folder except Assets folder in bundles
	location ~ /(addons|plugins)/.*/Assets/ {
		allow all;
		access_log off;
	}
	location ~ /(addons|plugins)/integrations/authcallback/ {
		try_files $uri /index.php$is_args$args;
		allow all;
	}
	location ~ ^/(addons|plugins)/ { deny all; }

	# Deny all php files in themes folder
	location ~* ^/themes/(.*)\.php {
		deny all;
	}
	
        # deny access to .htaccess files, if Apache's document root
	# concurs with nginx's one
	#
	location ~ /\.ht {
	       deny all;
	}
	
	# Don't log favicon
	location = /favicon.ico {
		log_not_found off;
		access_log off;
	}

	# Don't log robots
	location = /robots.txt  {
		access_log off;
		log_not_found off;
	}

	# Deny yml, twig, markdown, init file access
	location ~* /(.*)\.(?:markdown|md|twig|yaml|yml|ht|htaccess|ini)$ {
		deny all;
		access_log off;
		log_not_found off;
	}

	# Deny all attempts to access hidden files/folders such as .htaccess, .htpasswd, .DS_Store (Mac), etc...
	location ~ /\. {
		deny all;
		access_log off;
		log_not_found off;
	}

	# Deny all grunt, composer files
	location ~* (Gruntfile|package|composer)\.(js|json)$ {
		deny all;
		access_log off;
		log_not_found off;
	}

	location ^~ /app/bundles/CoreBundle/Assets/js/libraries/ckeditor/filemanager/connectors/php {
		include snippets/fastcgi-php.conf;
		fastcgi_pass unix:/run/php/php7.2-fpm.sock;

		add_header 'Access-Control-Allow-Origin' $acao  always;

		# required to be able to read Authorization header in frontend
		add_header 'Access-Control-Expose-Headers' $aceh always;

		fastcgi_param SCRIPT_FILENAME $document_root/$fastcgi_script_name;
	}


	# pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000

	location ~ \.php$ {

			include snippets/fastcgi-php.conf;
			fastcgi_pass unix:/run/php/php7.2-fpm.sock;
	}


	

}
